
	* convert bindings into a hash table (if not already done)
	* add support for threads (either in the core or in a lib)

	* add a comment to all library functions and types describing the
	  parameters taken through struct sdrl_value *value

	* machine value type with a pointer to a machine structure (for calling a function in another machine)
	* a function to automatically check args based on min/max args allowed?
	* function to check types (in libbase??)
	* function to set a binding (in libbase?)

	* make a heap implementation
	* make parser catch errors during a parse

	* add environment type?
	* better way to initialize libraries?
	* a function to automagically register bindings

	* make bindings use a binary tree?
	* what about expr type in relation to destroy() (creating an expr value that is not a function or mach->code)
	* add constant values (modifier to value or bitflags in type?)
	* can we simplify the semantics of set?

	* add garbage collection
	* allow multiple event stacks in a continuation
	* make the parser parse syntactic sugary goodness
	* make the parser modifiable by the code itself
	* add cross-cutting language constructs (aspects?)
	* can you do aspects using the continuation stack or should you do it by modifying the expr tree


