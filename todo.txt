
	* make some of the #defines "redefinable"

	* you can make a static array of sdEvent structs to form a stack where when you call the function to
	  add an event, it just sets the values in the static elements and increments the stack pointer.
	  An inline function can be used in machine.c to automatically execute the event in a standardized
	  fashion.
	* if you did the realloc system, you could make seperate modules external to the core that handled
	  various memory models such as just using realloc, using a garbage collection library of some kind,
	  using a memory tracker, etc.  You could make a macro like g_realloc or somethnig for global realloc
	  which can be reasigned and is used when memory is not to be tied to a particular machine and
	  anything tied to a machine uses s_realloc (will need new tames for these) that takes the machine
	  struct and uses the pointer to an allocator in it.

	* should you use a common heap instead of a seperate heap for each machine?  It would allow more
	  easy sharing of values (no need to worry about which machine has which value) and it would pose
	  fewer concerns to a pointer-based type system.  Lua uses a function pointer to realloc passed to
	  it when initialized so that you can pass it a custom allocation function to keep instances isolated
	  if you want.
	* should sdrl_destroy/duplicate_value be that or sdrl_value_destroy/duplicate?
	* what should happen with the array manipulation functions in terms of who is responsible for
	  creating a reference for the value being stored in the array?
	* look at python and perl in terms of reference management and try to make reference management
	  (who creates and destroys references) easier to follow such that you avoid reference-based bugs
	* should we delete utils.c since it's not really used now
	* you *have* to look into how things will work with librarys loaded dynamically with respect to
	  having access to type variables.  You may want to have both type systems at once
	* should type make functions take the type as an argument?  this would allow for reuse of functions
	  by subclasses of a certain type.  Make functions consistent where needed

	* make all destroy functions use void return instead of int
	* make all create_t type functions more generic by having them allocate based on the size in the
	  type struct and have them memset the result such that certain create funcs can call other create
	  funcs directly, allowing for a rather simple yet flexible inheritence constructor system.
	  make_<type> functions would not necessarily do the same although they can.  Maybe you can make all
	  make functions that receive a type do this
	* make basetypes all seperate files complete with support functions
	* use void functions where appropriate, like destroy

	* make a new list type sdList { sdValue value, sdValue *ref, sdList *next }
	* add the pop/unshift realloc downsizing code (if at all)
	* make functions for push, pop, shift, unshift
	* make a duplicate environment function

	* should sdrl_make_call_expr really by called sdrl_make_expr_expr (despite it's strangity?)
	* add cplusplus checks to headers that add an extern "C" { } block

------------

	* make a "profile" system where a certain profile can be loaded into a machine configuring that
	  machine for a particular 'sublanguage'.  You can load a lisp profile for example and get all the
	  functions named and working as you'd expect in lisp.  It would/could be a matter of defining
	  things with certain names, using the macro/ast-rewriting system to preprocess ast, and possibly
	  bitflag settings in the machine to change core behaviours of various kinds

	* add AST traversers that convert "if" and various other syntactic "features" into pure "SDRL"
	  format (verbose).  This prevents the need for a special parser but still has a lot of benifits
	  and is much more configurable, even though it probably would be slower (a custom parser would be
	  for speed and for complex syntax)
	* add a basic object oriented system

	* improve the error handling so that you can more easily debug programs.  Make the linenumber more
	  accurate.  Can/should you make the error messages more accurate/informational?
	* add the ability to catch errors and handle them like exceptions
	* add a reasonably detailed exception printing function so that you can trace errors

	* add flags to the machine or something such that a program can change certain (what might be compiled
	  in atm) options, such as treating "namespace.name" type names as special (causing a recursive lookup)
	* should it be possible to set the parser on the command line or somethnig?
	* make regression tests to test all aspects of the base library extensively
	* make (if there isn't one already) a function that takes a string and evaluates it as code
	* review 'lookup', 'set', & 'setlist' and cleanup

	* make a hash string value (type?) and modify bindings to take a precalculated hash and then
	  use those functions as often as possible and make language bindings to support it so you can use
	  the values directly in order to speed up accesses when you know the hash will not otherwise be
	  preserved

	* make string functions: strcmp, uppercase, lowercase
	* make libraries namespacable
	* add a namespace command.  Should it be a form or a function? (namespace foo (code (set num 2)))
	* add a 'load' command that (somehow) calls the library loading function that adds all the library
	  bindings to the environment.  I don't know how, sematically, this will work with namespaces such
	  that each library behaves in an expected way.  Doing it like python might be good

	* make the output of dispexpr.c more readable
	* make parser catch errors during a parse
	* make the lambda parser support hex and octal number representation

	* rewrite event.c to use a preallocated set of events (???)
	* make equals and nequals more generic (not just numbers)
	* machine value type with a pointer to a machine structure (for calling a function in another machine)
	* optimize the hash function
	* add the ability to make a reference constant

	* get an autodoc creator setup

Refactoring:

	* should retract_environment replace destroy_environment (in name)
	* should we rename "ret" in sdrl_machine to something more appropriate such as acc or accumulator
	* rename sdrl_load_<lib> to sdrl_load_canonical_<lib>
	* can you convert to using enums?  what are the drawbacks with regards to backwards compatibility?
	* should you move the number and string types to libbase and move the basetypes into utils?

Tests:

	* should tests be categorized particularily with respect to the libraries being tested?
	* implement a simple regular expression matcher as seen in beautiful code. It is simple, functional,
	  and more importantly, it needs more builtin functions (the ability to get chars in a string)
	* a brainfuck interpreter
	* write an IRC client/bot that uses SDRL quite integrally (rather than as an extension like stutter)

Structural Issues:

	* lexblock, dynblock, and expr type evaluate funcs set the args to be a value in the env but the
	  first arg is the function itself.  Should it be removed from args first?
	* should you have a more robust object system with a proper "init/release" type function for each
	  type?  It will allow for better inheritance in exchange for a slight performance loss.  There is a
	  chance we will have problems with environment since the actual struct will first be allocated so
	  there must be a way, after that's occurred, to create a new env or to extend an existing one.
	  Another issue is strings.  We currently allocate strings as a single block since strings are not
	  intended to be *directly* changed, instead a new string value will be created.
	* a possible way to remove the string and number types from the core (allowing for alternate
	  implementations) would be change expr to hold either an identifier, a value, or an expr, and
	  have the parser convert all strings and numbers to values.  The downsides of this is that the
	  parser would then have to know about the types somehow and also any identifiers in the expr would
	  not be convertable into strings during interpretation.  One benifit of this however, is the
	  ability of the parser to directly accept literals for things that are not numbers or strings such
	  as lists of literals, complex numbers, etc.  It would also be possible to use a "macro/ast mod"
	  system to convert and verify the AST before actual execution such that all identifiers are properly
	  converted into whatever they should be (either direct function names or turned into value lookups
	  with strings instead of identifiers).  This would get around the downside part and possibly result
	  in faster evaluations.
	* another possible way to remove number and string types from the core is if you had subtypes for
	  exprs and have a function in the type that can be called to turn the expr into a value.  The
	  function and thus the expr type would have to be outside of the core and the parser would have
	  to know about the type but since that's outside of the core too, the type itself doesn't have to
	  be in the core.
	* is there a benifit to having multiple event stacks?  Perhaps the ability to package up the current
	  stack when an error has occured and start executing an exception handler function on a completely
	  different stack.  Another possible use would be in multithreading however it might be more useful
	  to make a completely different machine structure for each thread and give each machine a reference
	  to the same global environment in order to achieve the "shared memory" of threads.
	* should you make expr more like all values in that you have a "subclass" for each type of expr
	  (number, string, expr). struct sdNumberExpr { sdExpr expr; number_t num };  This would allow
	  you to get rid of the union (not that big a deal) but also to easily make alternate expr types
	  such as one that contains an sdValue.
	* what do you do if a value being applied/evaluated is non-executable (does not have an evaluate
	  function in it's type)?  Should you just return the value?  Should it be an error?  This "feature"
	  is exploited by "if" such that it calls its params like a function but if they aren't (code ) blocks,
	  it expects that the call will result in the value passed being returned.
	* re-evaluate the reference tracking in the environment functions (extend/retract) particuarily with
	  respect to the fact that extending mach->env needs to take into account that mach->env's reference
	  needs to be destroyed.  Should extend steal the environment reference it's given (thus you just need
	  to make a reference whenever you extend an env other than mach->env
	* possibly add caching to environments.  The easiest way to allow full caching is to store a bitflag
	  with a cache entry to signify it as such so that when you destroy the entry, you don't call the
	  destroy function.  The trouble though is when the original entry is destroyed somehow for some
	  reason (or is even reassigned).  The cache entry will then be invalid.  A less efficent alternative
	  could be to store a pointer to the env containing the entry instead.  What about though if an
	  inbetween env creates a new entry that overrides the previous one?  Why wouldn't a reference work in
	  this case? (maybe it will)
	* how will set and setlist work with regards to the value/args? Should it duplicate the arg before
	  assigning it, steal the reference (clobber the args) or make a reference?  The make reference
	  method didn't seem to work in setlist because we actually need to clobber the args given the
	  way we use the next field =(

Features:

	* add support for threads (either in the core or in a lib)
	* add garbage collection
	* a parser that supports various syntactic sugar (using yacc/bison?)
	* cross-cutting language constructs (aspects?) (can you do aspects using the continuation stack or
	  should you do it by modifying the expr tree)


