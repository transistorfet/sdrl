
	* you could have some kind of "invoke method on object" function, possibly % or . or even just 'get'
	  that takes a string like object.subobj.thing.  First consider (% object.thing args) or
	  (% object thing args):  It looks up object to get a value that inherits from sdEnv.  It then finds
	  thing in the environment and calls it like a function given [ object, args ] as the args.  Since
	  environments search their parents, it automatically provides inheritence.  You can then have a
	  special function that can be in any environment that is automatically used when looking up values
	  within objects (if resolving the value of object.subobj.thing, it somehow/somewhy first gets object,
	  then does a lookup on object for '.' or 'get'.  Then calls that function to do the lookup on object
	  to get 'subobj', and then repeats.  This is however a very cumbersome and slow process.  It does
	  however allow in-language reassigning of the resolution operator.  This also allows embedded
	  objects to hijack the lookup and instead use fixed values instead of what's available in the env
	  as well as providing access control which is otherwise not available in the langugage itself.  The
	  other way to do this would be to have a function pointer inside the type struct specially dedicated
	  to resolution which would make builtin stuff go faster but would make it more difficult (or require
	  an extra layer) to do in-lang reassignment.
	* you can make a library for object oriented specific language stuff (so long as it's not too much of
	  a tack-on like that)

	* if you did the realloc system, you could make seperate modules external to the core that handled
	  various memory models such as just using realloc, using a garbage collection library of some kind,
	  using a memory tracker, etc.  If you do this, use macros for the actual funcs so that they can
	  easily be redefined.  Should there still be a heap pointer in the machine for passing to the
	  realloc func (or even passing the whole mach)?  THIS HAS A MAJOR PROBLEM!!!  Since you need the
	  machine to get the funcpointer for the free() func, you have to pass the machine to every function
	  that deallocates including DECREF and from env's stored destroy func.

	* should sdrl_destroy/duplicate_value be that or sdrl_value_destroy/duplicate?
	* should make functions be sdrl_<type>_make?
	* update docs (and re-eval) function behaviour with respect to references (steal/borrow/etc)
	* you kinda need the ability to make a value constant.  It could be in the value itself or maybe
	  in the binding(env).  For sdIRC, you have an array of servers and an array of windows that you
	  want accessible to the program but don't necessarily want to be changed.
	* should we delete utils.c since it's not really used now
	* should push and unshift return a reference to the array they operated on? or maybe the array size?

	* for some values, it would be helpful to return a reference on 'resolve' (arrays, envs, etc) while
	  others would be better to duplicate (strings, numbers).  Should there be 2 kinds of resolve? should
	  there be a virtfunc in type for resolving?  You could use a bitflag in the type struct.
	* do you need/should you have a generic mechanism (virtfunc in type) for getting/setting values
	  within a value (array, env, maybe list, etc)?
	* should you have a tostring virtfunc?
	* should array functions be in a seperate lib like string funcs? what about other groups of funcs?

	* how should resolution be done on envs?  Parser or preprocessor convert to using %?  Use a special
	  function that converts foo.bar style names?  Make resolve ($) use foo.bar style names?
	* fill in the lib load functions to create the namespace if the env given is NULL
	* make a method/func/something for importing names from a namespace (env) into the global env
	* add a namespace command.  Should it be a form or a function? (namespace foo (code (set num 2))).
	  It will lookup the named namespace as an env in the global namespace (creating on if it's not found)
	  and make that the current env while the expr executes and then restore the previous env (or rather
	  this should happen automagically (or should it be forced to avoid accidents))

	* add function to get size (or last) element of an array
	* make an array index function to get (and another to set) an element in an array
	* make string functions: uppercase, lowercase, sprint
	* add splice array function
	* add a function that does an env add-or-replace (so you don't have to call both functions)
	* make INCREF and DECREF reference the args only once
	* make a second sdrl_call function that takes a text name for the function and does the lookup
	* make all 'make' functions take a machine instead of a heap
	* use sdrl_make_value and all other types of constructors in all make and create functions
	* make basetypes all seperate files complete with support functions
	* make some of the #defines "redefinable"
	* add function/macro in base that parses a string and then evals it in one step

	* add the pop/unshift realloc downsizing code (if at all)
	* make a duplicate environment function
	* fix error line numbering such that the machine's current line number is the actual expr being
	  evaluated.  Right now, it's set to, basically, the last arg in a function call to have been eval'd.
	  It might be possible to use events to record what the linenumber should be set to before the code
	  is eval'd.
	* make a machine-clone function that makes a new machine that uses the same env, heap, parser, etc

	* add cplusplus checks to headers that add an extern "C" { } block

------------

    Error Handling:

	* make error generation macros create more descriptive messages like how type_error does now
	* add the ability to catch errors and handle them like exceptions
	* add a reasonably detailed exception printing function so that you can trace errors
	* make error somehow store the continuation or something so that it's easy to restart it

    New Features:

	* make a "profile" system where a certain profile can be loaded into a machine configuring that
	  machine for a particular 'sublanguage'.  You can load a lisp profile for example and get all the
	  functions named and working as you'd expect in lisp.  It would/could be a matter of defining
	  things with certain names, using the macro/ast-rewriting system to preprocess ast, and possibly
	  bitflag settings in the machine to change core behaviours of various kinds

	* add AST traversers that convert "if" and various other syntactic "features" into pure "SDRL"
	  format (verbose).  This prevents the need for a special parser but still has a lot of benifits
	  and is much more configurable, even though it probably would be slower (a custom parser would be
	  for speed and for complex syntax)

	* add a basic object oriented system using environments (possibly as a seperate lib)
	* add a 'load' command that (somehow) calls the library loading function that adds all the library
	  bindings to the environment.  I don't know how, sematically, this will work with namespaces such
	  that each library behaves in an expected way.  Doing it like python might be good

    General:

	* add flags to the machine or something such that a program can change certain (what might be compiled
	  in atm) options, such as treating "namespace.name" type names as special (causing a recursive lookup)
	  (or should this be handled through an AST rewriter/macro system?)
	* should it be possible to set the parser on the command line or somethnig?
	* make regression tests to test all aspects of the base library extensively

	* make a hash string value (type?) and modify bindings to take a precalculated hash and then
	  use those functions as often as possible and make language bindings to support it so you can use
	  the values directly in order to speed up accesses when you know the hash will not otherwise be
	  preserved (note: as long as you defer the hash modulo to the end, the hash will always be the
	  same so you don't have to adjust when the size of the table changes) (is it really worth it?)

	* make the output of dispexpr.c more readable
	* make parser catch errors during a parse
	* make the lambda parser support hex and octal number representation

	* machine value type with a pointer to a machine structure (for calling a function in another machine)
	* optimize the hash function

	* get an autodoc creator setup

Refactoring:

	* should all the libs have custom mangles (sdrl_base_parse_string vs just sdrl_parse_string)
	* should retract_environment replace destroy_environment (in name) (???)
	* should we rename "ret" in sdrl_machine to something more appropriate such as acc or accumulator
	* rename sdrl_load_<lib> to sdrl_load_canonical_<lib>
	* should you move the number and string types to libbase and move the basetypes into utils?

Tests:

	* should tests be categorized particularily with respect to the libraries being tested?
	* implement a simple regular expression matcher as seen in beautiful code. It is simple, functional,
	  and more importantly, it needs more builtin functions (the ability to get chars in a string)
	* a brainfuck interpreter
	* write an IRC client/bot that uses SDRL quite integrally (rather than as an extension like stutter)

Structural Issues:

	* you can have chaining continuations much like environments chain together.  Each event stack would
	  be a stack frame.  There might not be a stack frame for each function call but there might be a new
	  one each time sdrl_call is called.  The machine would then run until the end of the current stack
	  frame and return while at the same time, if an error occurs, a record of where the call was made
	  on the stack is still kept.  With the current method of saving the current sp on the C stack, that
	  information is not available to any other function.
	* should there be a place in sdMachine for a pointer to something used by the preprocessor, like a
	  list of defined macros that it uses to rewrite the AST?
	* lexblock, dynblock, and expr type evaluate funcs set the args to be a value in the env but the
	  first arg is the function itself.  Should it be removed from args first?
	* should you have a more robust object system with a proper "init/release" type function for each
	  type?  It will allow for better inheritance in exchange for a slight performance loss.  There is a
	  chance we will have problems with environment since the actual struct will first be allocated so
	  there must be a way, after that's occurred, to create a new env or to extend an existing one.
	  Another issue is strings.  We currently allocate strings as a single block since strings are not
	  intended to be *directly* changed, instead a new string value will be created.
	* a possible way to remove the string and number types from the core (allowing for alternate
	  implementations) would be change expr to hold either an identifier, a value, or an expr, and
	  have the parser convert all strings and numbers to values.  The downsides of this is that the
	  parser would then have to know about the types somehow and also any identifiers in the expr would
	  not be convertable into strings during interpretation.  One benifit of this however, is the
	  ability of the parser to directly accept literals for things that are not numbers or strings such
	  as lists of literals, complex numbers, etc.  It would also be possible to use a "macro/ast mod"
	  system to convert and verify the AST before actual execution such that all identifiers are properly
	  converted into whatever they should be (either direct function names or turned into value lookups
	  with strings instead of identifiers).  This would get around the downside part and possibly result
	  in faster evaluations.
	* another possible way to remove number and string types from the core is if you had subtypes for
	  exprs and have a function in the type that can be called to turn the expr into a value.  The
	  function and thus the expr type would have to be outside of the core and the parser would have
	  to know about the type but since that's outside of the core too, the type itself doesn't have to
	  be in the core.
	* is there a benifit to having multiple event stacks?  Perhaps the ability to package up the current
	  stack when an error has occured and start executing an exception handler function on a completely
	  different stack.  Another possible use would be in multithreading however it might be more useful
	  to make a completely different machine structure for each thread and give each machine a reference
	  to the same global environment in order to achieve the "shared memory" of threads.
	* should you make expr more like all values in that you have a "subclass" for each type of expr
	  (number, string, expr). struct sdNumberExpr { sdExpr expr; number_t num };  This would allow
	  you to get rid of the union (not that big a deal) but also to easily make alternate expr types
	  such as one that contains an sdValue.
	* what do you do if a value being applied/evaluated is non-executable (does not have an evaluate
	  function in it's type)?  Should you just return the value?  Should it be an error?  This "feature"
	  is exploited by "if" such that it calls its params like a function but if they aren't (code ) blocks,
	  it expects that the call will result in the value passed being returned.
	* re-evaluate the reference tracking in the environment functions (extend/retract) particuarily with
	  respect to the fact that extending mach->env needs to take into account that mach->env's reference
	  needs to be destroyed.  Should extend steal the environment reference it's given (thus you just need
	  to make a reference whenever you extend an env other than mach->env
	* possibly add caching to environments.  The easiest way to allow full caching is to store a bitflag
	  with a cache entry to signify it as such so that when you destroy the entry, you don't call the
	  destroy function.  The trouble though is when the original entry is destroyed somehow for some
	  reason (or is even reassigned).  The cache entry will then be invalid.  A less efficent alternative
	  could be to store a pointer to the env containing the entry instead.  What about though if an
	  inbetween env creates a new entry that overrides the previous one?  Why wouldn't a reference work in
	  this case? (maybe it will)

Features:

	* add support for threads (either in the core or in a lib)
	* add garbage collection
	* a parser that supports various syntactic sugar (using yacc/bison?)
	* cross-cutting language constructs (aspects?) (can you do aspects using the continuation stack or
	  should you do it by modifying the expr tree)


