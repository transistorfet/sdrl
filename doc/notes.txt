
Log:
 - the {} syntax was not only a pain in the ass but essentially just a special case
   of code() that did not require the parameters to be passed unevaluated.  I removed
   them and added the ability to call functions without evaluating the params.  It
   goes against the goal of no special functions but it makes the parser simpler as
   well as making it more lispy-like (which is somewhat good but it makes it more
   ordinary and lisp-copyish.

--------------------------------------------------------------------------


- floating point number support (?)
- null check (!@) (?)
- null datatype (for lists) (?)
- ! and !! functionality for multiple params (?)







	// what do you do if the binding is to a non-executable
	// yet is being applied (value index for strings, arrays, environments, etc?)

:('struct, @('x,'y,'z))
:(struct, @(5,6,7))		# x, y, z would be those values

:('struct, {:('name,$),@(append(name,'.x), append(name,'.y), append(name,'.z))}
:(struct('vec), @(5,6,7))	# vec.x, vec.y, vec.z would be those values


Possible Commands

^ or **
++
--

open
close
read
write




define(foo, code(
	define(@(a, b), $)
	if(==(a, b),
		code(a),
		code(+(a, b)))))


(define, foo, (code,
	(define, (@, a, b), $)
	(if (==, a, b),
		(code, a),
		(code, (+, a, b)))))

