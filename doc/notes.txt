

References:

All functions that return a pointer transfer ownership of that reference to the
caller.  All functions that take a pointer assume that the reference is
borrowed and that the caller is responsible for the reference unless otherwise
stated.  The following functions steal ownership of references:
	all destroy functions	The reference is destroyed

	sdrl_make_value		The "next" reference is stolen and the
				"data" reference behaviour is defined
				by the type.

	sdrl_push_value
	sdrl_unshift_value	The "value" reference is stolen and added to
				the given list.

	sdrl_add_binding
	sdrl_replace_binding	The "data" reference is stolen and added to the
				bindings table.  (The reference is opaque and
				cannot be duplicated anyways).

	sdrl_retract_environment	The reference to the environment is
					destroyed and a reference to the parent
					is returned.

	sdrl_push_event

	sdrl_make_*_expr

	sdrl_merge_return

	
	

SDRL 0.1 NOTES:

- null check (!@) (?)
- null datatype (for lists) (?)
- ! and !! functionality for multiple params (?)

:('struct, @('x,'y,'z))
:(struct, @(5,6,7))		# x, y, z would be those values

:('struct, {:('name,$),@(append(name,'.x), append(name,'.y), append(name,'.z))}
:(struct('vec), @(5,6,7))	# vec.x, vec.y, vec.z would be those values


Possible Commands

^ or **
++
--



