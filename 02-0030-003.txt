

	Super Duper Regular Language (SDRL) Version 0.1
	02-0030-003
	23/01/2004



1.	Goals:

		- Very Regular Syntax
		- Easy To Parse
		- No Special Command Exceptions
		- Application Embeddable
		- No Required Spaces


2.	Introduction:

		The purpose of this language is to be an small embedded application
		extension language that is easy to parse and makes no special exceptions
		for any language constructs.  Code must be easily written in a string
		to be stored in the embedding application.


3.	Structure:

		Everything which starts with a number, a single (') or double (") quote,
		a forward slash (\), or a open parenthesis ({) (closed by a closing
		parenthesis (})) is a value.  Anything else is a binding (variable
		or function).  All whitespaces are completely ignored except when they
		occur between double quotes. The comma, opening bracket, and closing
		bracket are used to seperate bindings and values.  All functions are
		called by the name followed by a bracketed list of parameters.  Each
		function can only take one parameter which is always in the form of a
		list.  The one parameter is the whole of the argument list with each
		comma seperated value occupying one element of the parameter list passed
		to the function.  (eg. foo(5, 10, 15) would pass the list (5, 10, 15) to
		the function foo).  Everything is essentially one of two types of values,
		a number or a string.  There are 7 acutal types however.  Numbers, C
		function pointers, and primatives are of essentially numbers.  Strings,
		symbols, and code strings are essentially strings. 


4. Values

		A number returns the value of the number according to decimal conversion
		unless the number starts with 0 (in which case the number is converted
		as octal) or 0x (in which case the number is converted as hexidecimal).

		A single quote signifies a symbol.  There is no closing single quote but
		instead all characters up to a seperating character is taken as the
		symbol.

		A double quote signifies a string.  All characters except the forward
		slash (\) are taken as the string up to the next double quote.  The
		forward slash is an escape character in which the character immediately
		following is used to determine a non-printable character value which
		is then added to the string in the position of the forward slash and
		character.  If the character that follows is not special, the character
		itself is returned.

		The forward slash returns a number whose value is character immediately
		following unless the character is a special escape character in which
		case the resolved value is returned.

		The parenthesis signify a string of code.  The string with type VT_CODE
		is returned containing all the characters except whitespaces up to the
		closing parenthesis.  The parenthesis are nestable (any matching opening
		and closing parenthesis inside the initial set of parenthesis are read
		into the string).

5.	Functions:

		When a function pointer is evaluated, a pointer to the sdrl_machine is
		passed to the function.  On entry, the machine's ret is set to NULL and
		the machine's opr is set to the first value of the linked list of
		parameter values passed to the function.  When this function returns,
		the ret field must contain a usable return value or NULL if an error
		has occured.  The opr field, if not set to NULL, will be destroyed as
		a value.


5.	Primatives:

		+	Adds the list of numbers passed to it.  If no parameters are
			passed, it returns 0.  If at least one parameter passed is
			not a number, an ERR_INVALIDPARAMS error is generated.

		-	Subtracts the first number passed to it by the list of the
			remaining numbers passed to it.  If no parameters are passed,
			it returns 0.  If at least one parameter passed is not a
			number, an ERR_INVALIDPARAMS error is generated.

		*	Multiplys the list of numbers passed to it.  If no parameters
			are passed, it returns 0.  If at least one parameter passed is
			not a number, an ERR_INVALIDPARAMS error is generated.

		/	Divides the first number passed to it by the list of the
			remaining numbers passed to it.  If no parameters are passed,
			it returns 0.  If at least one parameter passed is not a
			number, an ERR_INVALIDPARAMS error is generated.

		&	Bitwise Ands the list of numbers passed to it with eachother.
			If no parameters are passed, it returns 0.  If at least one
			parameter passed is not a number, an ERR_INVALIDPARAMS error
			is generated.

		|	Bitwise Ors the list of numbers passed to it with eachother.
			If no parameters are passed, it returns 0.  If at least one
			parameter passed is not a number, an ERR_INVALIDPARAMS error
			is generated.

		!	Bitwise Compliments the first parameter.  If no parameters or
			more than 1 parameter is passed, an ERR_INVALIDPARAMS error
			is generated.

		&&	Logicaly Ands the list of parameters based on the true/false
			values.  If no parameters are passed, it returns false.

		||	Logicaly Ors the list of parameters based on the true/false
			values.  If no parameters are passed, it returns false.

		!!	Logically Nots the first parameter.  If no parameters or
			more than 1 parameter is passed, an ERR_INVALIDPARAMS error
			is generated.

		<	Tests Less Than on the list of numbers passed in the order
			they appear.  (ie. the first parameter is less than the second
			is less than the third and so on).  If no parameters are
			passed, it returns false.  If at least one parameter passed is
			not a number, an ERR_INVALIDPARAMS error is generated.

		<=	Tests Less Than or Equal To on the list of number passed
			in the order they appear.  (ie. the first parameter is less
			than or equal to the second is less than or equal to the third
			and so on).  If no parameters are passed, it returns false.  If
			at least one parameter passed is not a number, an
			ERR_INVALIDPARAMS error is generated.

		>	Tests Greater Than on the list of numbers passed in the
			order they appear.  (ie. the first parameter is greater than
			the second is greater than the third and so on).  If no
			parameters are passed, it returns false.  If at least one
			parameter passed is not a number, an ERR_INVALIDPARAMS error
			is generated.

		>=	Tests Greater Than or Equal To on the list of numbers passed
			in the order they appear.  (ie. the first parameter is greater
			than or equal to the second is greater than or equal to the
			third and so on).  If no parameters are passed, it returns
			false.  If at least one parameter passed is not a number, an
			ERR_INVALIDPARAMS error is generated.

		=	Tests Equality of the list of numbers passed to it.  If no
			parameters are passed, it returns false.  If at least one
			parameter is not a number, an ERR_INVALIDPARAMS error is
			generated.

		~	String Append.  All parameters are appended together into one
			string.  Any string type will be appended and the type of the
			first string will be used as the type for the returned string.
			If no parameters are passed, it returns an empty string.  If
			at least one parameter is not a string type, an
			ERR_INVALIDPARAMS error is genertated.

		~@	List Append.  All parameters are appended together into one
			list.  If no parameters are passed, an empty list is returned
			(ie. NULL).

		.	If the first parameter passed is a symbol, the binding for that
			symbol is found.  If the first parameter or the binding for the
			symbol is an environment, then the second parameter must be a
			symbol which is looked up as a binding in the environment.  If
			the first parameter or binding is of type VT_VALUE, and there
			is a second parameter, it is taken as an index into the list
			(starting from 0) and the value at that element in the list is
			returned.  Otherwise the value of the first parameter or
			binding is returned.  If no parameters or too many parameters
			are given, an ERR_INVALIDPARAMS error is genertated.

		@	Creates a list of all the parameters passed to it.  (Returns
			the parameter list sent to it).

		%	Evaluates all the parameters passed to it and returns the value
			returned by the evaluation of the last parameter in the list.
			(Returns the last value of its parameter list).  If no
			parameters are passed, nothing is done.

		;	Evaluate the first parameter by passing it the list in the
			second parameter.  If no parameters are passed, an
			ERR_INVALIDPARAMS error is genertated.

		;*	Evaluate the first parameter by passing it the list in the
			second parameter and repeat the evaluation until broken.  If no
			parameters are passed, an ERR_INVALIDPARAMS error is genertated.

		.*	Stops a string from repeating.  If a parameter is passed, it
			specifies what code string number to refer to (0 is assumed as
			default).  If more than 1 parameter is passed, an
			ERR_INVALIDPARAMS error is genertated.

		?	Conditional.  The first parameter is evaluated and if it is
			non-zero (true) then the first codestring is evaluated,
			otherwise the second codestring is evaluated.  If anything
			except 3 parameters are passed, an ERR_INVALIDPARAMS error
			is genertated.

		?*	Multiconditional.  A series of list is passed, each list
			containing exactly 2 elements.  The first element is a
			codestring which is evaluated.  If it returns true, the second
			element is evaluated and the result returned to the program,
			otherwise the process is repeated with the next list.  If no
			parameters are passed or a parameter passed is not in the form
			of a list with 2 elements, an ERR_INVALIDPARAMS error is
			genertated.

		:$	Creates an environment and binds it to the symbol passed in the
			first parameter.  If no parameters or more than 1 parameters is
			passed, an ERR_INVALIDPARAMS error is genertated.

		:	Binds a value to a label.  If the first parameter is an
			environment then it is taken as the environment in which to
			create a binding, otherwise the current evnironment is used.
			The next parameter must be either a symbol or a list of
			symbols.  If it is a list of symbols, the list as well as the
			list of the last parameter are traversed and the corresponding
			values are bound to the symbols.  If there are more symbols
			than values, the remaining symbols are bound to the number 0.
			The last symbol receives the rest of the list of the same
			depth.  The value of the last parameter is returned.  If no
			parameters or more than 3 parameters are passed, or if the
			parameter pattern is not satisfied, an ERR_INVALIDPARAMS error
			is genertated.  If a symbol is already bound, 

		:=	Binds a value to a label exactly as above except if the symbol
			already exist, the new value is bound.

		$	The list of parameters passed to a function (Value) (Only
			available when a binding of type VT_CODE is evaluated).

		#	Comment.

		##	Comment.

		#* *#	Comment.

		#<file>	Includes the file specifed.


A1.	Example Code

		Add two numbers:
			+(5,3)

		A Function:
			:('foo,{:(@('x,'y),$),		# define parameters
				?(<(x,y),
					x,		# the evaluation of a value is
					y)})		# the value (x and y here have
							# already been evaluated)

			:('foo,{:(@('x,'y),$),
				?(<(x,y),
					{x},		# now only one of the two
					{y})})		# conditions is actually
							# evaluated

		A While Loop Function:
							# while({=(x,5)}, {:('x,+(x,1))})
			:('while, {
				:(@('cond, 'code),$),
				;*(
					?(cond(),
						{ code() },
						{ .*(1) })
				)
			})


C.	ChangeLog

		23/01/2004	Started
		09/02/2004	Version 0.1 Released


