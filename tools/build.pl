#!/usr/bin/perl
#
# Name:		build.pl
# Description:	Generate the makefiles and configuration files required for
#		building the program
#

use strict;
use warnings;
use IO::File;

my $makefiles = {
	'core' => {
		'root' => "src/core",
		'libtarget' => "libsdrl.a",
		'sources' => [ "src/core" ]
	},
	'libbase' => {
		'root' => "src/lib/base",
		'libtarget' => "libbase.a",
		'sources' => [	"src/lib/base", "src/lib/base/forms", "src/lib/base/funcs",
				"src/lib/base/parsers", "src/lib/base/types", "src/lib/base/utils" ]
	},
	'libio' => {
		'root' => "src/lib/io",
		'libtarget' => "libio.a",
		'sources' => [	"src/lib/io", "src/lib/io/funcs", "src/lib/io/types" ]
	},
	'libstring' => {
		'root' => "src/lib/string",
		'libtarget' => "libstring.a",
		'sources' => [	"src/lib/string", "src/lib/string/funcs" ]
	}
};

my %object_mappings = (
	"c" => "o",
	"cpp" => "o"
);

main();
exit(0);

sub main {

	foreach my $key (keys(%{ $makefiles })) {
		generate_makefile($makefiles->{ $key });
	}
}

sub generate_makefile {
	my ($info) = @_;

	my $tobase = get_path_to_base($info->{'root'});
	my @sources = get_source_files($info->{'root'}, @{ $info->{'sources'} });

	open(FILE, ">$info->{'root'}/Makefile") or (print "Unable to open file for writing: \"$info->{'root'}/Makefile\"\n" and return(-1));
	print FILE "# Automatically generated by tools/build.pl\n";
	print FILE "\n";
	print FILE "ROOT = $tobase\n";
	if (defined($info->{'libtarget'})) {
		print FILE "LIB_TARGET = $tobase/lib/$info->{'libtarget'}\n";
	}
	elsif (defined($info->{'target'})) {
		print FILE "TARGET = $tobase/lib/$info->{'target'}\n";
	}
	print FILE "\n";

	print FILE "OBJS = \\\n";
	foreach my $source (@sources) {
		my $object = get_object_file($source);
		print FILE "\t$object\t\\\n";
	}
	print FILE "\n\n";

	print FILE "include $tobase/rules.mk\n\n";

	chdir($info->{'root'});
	foreach my $source (@sources) {
		print FILE `gcc -MM -I$tobase/include $source` . "\n";
	}
	chdir($tobase);

	close(FILE);
}

sub get_source_files {
	my ($base, @sources) = @_;

	# TODO we assume we only get dir sources for now and just add all .c files
	my @files = ();
	foreach my $source (@sources) {
		opendir(DIR, $source) or (print "Unable to open directory $source\n" and exit(-1));
		while (my $file = readdir(DIR)) {
			if ($file =~ /\.c$/) {
				$file = "$source/$file";
				$file =~ s/^\Q$base\/\E//;
				push(@files, $file);
			}
		}
		closedir(DIR);
	}
	return(@files);
}

sub get_path_to_base {
	my ($root) = @_;

	my $path = "";
	my @parts = split("/", $root);
	foreach my $part (@parts) {
		$path .= "../";
	}
	$path =~ s/\/$//;
	return($path);
}

sub get_object_file {
	my ($file) = @_;

	foreach my $ext (keys(%object_mappings)) {
		if ($file =~ /\.\Q$ext\E$/) {
			$file =~ s/\.\Q$ext\E$/\.$object_mappings{ $ext }/;
			return($file);
		}
	}
	return($file);
}

